{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\dbino\\\\Desktop\\\\Code\\\\repos\\\\react-blog-app\\\\react-blog-app\\\\src\\\\Pages\\\\ArticlePage.js\";\nimport React, { useState, useEffect } from 'react';\nimport articleContent from './article-content';\nimport ArticlesList from '../Components/ArticlesList';\nimport CommentsList from '../Components/CommentsList';\nimport NotFoundPage from './NotFoundPage';\n\nconst ArticlePage = ({\n  match\n}) => {\n  const name = match.params.name;\n  const article = articleContent.find(article => article.name === name);\n  const [articleInfo, setArticleInfo] = useState({\n    upvotes: 0,\n    comments: []\n  }); //runs when component mounts and updates one of the things in the array\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const result = await fetch('/api/articles/' + name);\n      const body = await result.json();\n      setArticleInfo(body);\n    };\n\n    fetchData();\n  }, [name]);\n  const otherArticles = articleContent.filter(article => article.name !== name);\n\n  if (!article) {\n    return /*#__PURE__*/React.createElement(NotFoundPage, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 13\n      }\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }\n  }, article.title), article.content.map((para, key) => /*#__PURE__*/React.createElement(\"p\", {\n    key: key,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 25\n    }\n  }, para)), /*#__PURE__*/React.createElement(CommentsList, {\n    comments: articleInfo.comments,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }\n  }, \"Other Articles:\"), /*#__PURE__*/React.createElement(ArticlesList, {\n    articles: otherArticles,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }\n  }));\n};\n\nexport default ArticlePage;","map":{"version":3,"sources":["C:/Users/dbino/Desktop/Code/repos/react-blog-app/react-blog-app/src/Pages/ArticlePage.js"],"names":["React","useState","useEffect","articleContent","ArticlesList","CommentsList","NotFoundPage","ArticlePage","match","name","params","article","find","articleInfo","setArticleInfo","upvotes","comments","fetchData","result","fetch","body","json","otherArticles","filter","title","content","map","para","key"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,cAAP,MAA2B,mBAA3B;AACA,OAAOC,YAAP,MAAyB,4BAAzB;AACA,OAAOC,YAAP,MAAyB,4BAAzB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;;AACA,MAAMC,WAAW,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAe;AAC/B,QAAMC,IAAI,GAAGD,KAAK,CAACE,MAAN,CAAaD,IAA1B;AACA,QAAME,OAAO,GAAGR,cAAc,CAACS,IAAf,CAAoBD,OAAO,IAAIA,OAAO,CAACF,IAAR,KAAiBA,IAAhD,CAAhB;AAGA,QAAM,CAACI,WAAD,EAAcC,cAAd,IAAgCb,QAAQ,CAAC;AAAEc,IAAAA,OAAO,EAAE,CAAX;AAAcC,IAAAA,QAAQ,EAAE;AAAxB,GAAD,CAA9C,CAL+B,CAM/B;;AACAd,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMe,SAAS,GAAG,YAAY;AAC1B,YAAMC,MAAM,GAAG,MAAMC,KAAK,CAAC,mBAAmBV,IAApB,CAA1B;AACA,YAAMW,IAAI,GAAG,MAAMF,MAAM,CAACG,IAAP,EAAnB;AACAP,MAAAA,cAAc,CAACM,IAAD,CAAd;AACH,KAJD;;AAKAH,IAAAA,SAAS;AACZ,GAPQ,EAON,CAACR,IAAD,CAPM,CAAT;AAUA,QAAMa,aAAa,GAAGnB,cAAc,CAACoB,MAAf,CAAsBZ,OAAO,IAAIA,OAAO,CAACF,IAAR,KAAiBA,IAAlD,CAAtB;;AAEA,MAAI,CAACE,OAAL,EAAc;AACV,wBACI,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ;AAGH;;AACD,sBACI,uDACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKA,OAAO,CAACa,KAAb,CADJ,EAIQb,OAAO,CAACc,OAAR,CAAgBC,GAAhB,CACI,CAACC,IAAD,EAAOC,GAAP,kBACI;AAAG,IAAA,GAAG,EAAEA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAcD,IAAd,CAFR,CAJR,eAYI,oBAAC,YAAD;AAAc,IAAA,QAAQ,EAAId,WAAW,CAACG,QAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAZJ,eAaI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAbJ,eAcI,oBAAC,YAAD;AAAc,IAAA,QAAQ,EAAEM,aAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAdJ,CADJ;AAoBH,CA5CD;;AA8CA,eAAef,WAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport articleContent from './article-content';\r\nimport ArticlesList from '../Components/ArticlesList';\r\nimport CommentsList from '../Components/CommentsList';\r\nimport NotFoundPage from './NotFoundPage';\r\nconst ArticlePage = ({ match }) => {\r\n    const name = match.params.name;\r\n    const article = articleContent.find(article => article.name === name);\r\n\r\n\r\n    const [articleInfo, setArticleInfo] = useState({ upvotes: 0, comments: [] });\r\n    //runs when component mounts and updates one of the things in the array\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            const result = await fetch('/api/articles/' + name);\r\n            const body = await result.json();\r\n            setArticleInfo(body);\r\n        }\r\n        fetchData();\r\n    }, [name]);\r\n\r\n\r\n    const otherArticles = articleContent.filter(article => article.name !== name);\r\n\r\n    if (!article) {\r\n        return (\r\n            <NotFoundPage />\r\n        );\r\n    }\r\n    return (\r\n        <>\r\n            <h1>{article.title}</h1>\r\n            \r\n            {\r\n                article.content.map(\r\n                    (para, key) => (\r\n                        <p key={key}>{para}</p>\r\n                    )\r\n                )\r\n\r\n            }\r\n\r\n            <CommentsList comments = {articleInfo.comments}/>\r\n            <h2>Other Articles:</h2>\r\n            <ArticlesList articles={otherArticles} />\r\n        </>\r\n    );\r\n\r\n\r\n}\r\n\r\nexport default ArticlePage;"]},"metadata":{},"sourceType":"module"}